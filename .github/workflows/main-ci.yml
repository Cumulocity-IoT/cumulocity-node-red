# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

name: Main CI

env:
  NODE_VERSION: '18'

jobs:
  build:
    name: ðŸš§ Lint, Test, Build & (optionally) Release
    runs-on: ubuntu-latest
    steps:
      - name: Set RELEASE_VERSION env variable
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Mark backend version as SNAPSHOT
        if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/v')
        run: |
          cd backend
          sed -i '/\"version\"/s/\"\,/\-SNAPSHOT\"\,/g' cumulocity.json

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install Node.js dependencies
        run: | 
          yarn install --frozen-lockfile --immutable --non-interactive --prefer-offline

      - name: ðŸš§  Build Frontend
        run: | 
          yarn build:ui

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: node-red-ui-${{ env.C8Y_VERSION }}-${{ github.event.number }}-${{ github.run_id }}
          if-no-files-found: error
          retention-days: 5
          path: cumulocity-node-red-ui/dist/apps/sag-ps-iot-pkg-node-red-ui/

      - name: ðŸš§  Build Backend
        run: |
          docker build -t node-red-ms .
          docker save node-red-ms -o image.tar

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: node-red-${{ env.C8Y_VERSION }}-${{ github.event.number }}-${{ github.run_id }}
          if-no-files-found: error
          retention-days: 5
          path: |
            cumulocity.json
            image.tar
